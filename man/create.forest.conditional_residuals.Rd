% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rangerKnockoff.R
\name{create.forest.conditional_residuals}
\alias{create.forest.conditional_residuals}
\title{Knockoffs with conditional residuals}
\usage{
create.forest.conditional_residuals(
  X,
  method = "second_order",
  residuals_method = NULL,
  residuals_function = NULL,
  sigma = NULL,
  randomize = F,
  shrink = F,
  ...
)
}
\arguments{
\item{X}{data.frame for knockoffs}

\item{method}{`c("second_order","fixed","none")`
Procedure for creating numeric conditional residuals.
Ignored if `residuals_function` is provided.
 "second_order": Gaussian second order knockoffs; see [knockoff::create.second_order]
 "fixed": Fixed knockoffs; see [knockoff:create.fixed]
 "none": Only calculate conditional expectations. Useful for creating knockoffs with other software.}

\item{residuals_method}{`c("asdp","equi","sdp")`
Procedure for `method` of `"second_order"` or `"fixed"` when calculating covariance.
Default is "asdp" for `method = "second_order"`, "sdp" for `method = "fixed"`
 "asdp": See [knockoff::create_asdp]
 "equi": See [knockoff::create_equi]
 "sdp": See [knockoff::create_sdp]}

\item{residuals_function}{If provided, uses any custom function to create numeric residuals.
Must take an arbitrary sized numeric data.frame as an input, and return a numeric data.frame of the same size.}

\item{sigma}{Optional covariance when `method = "fixed"`
See [knockoff::create.fixed]}

\item{randomize}{Optional bool when `method = "fixed"`
See [knockoff::create.fixed]}

\item{shrink}{Optional bool when `method = "second_order"`
See [knockoff::create.second_order]}

\item{...}{Other values passed to [ranger::ranger]}
}
\value{
A knockoff data.frame with the same size, column names, and column types as `X`
}
\description{
Computes the conditional expectations of numeric variables and probabilities for categorical variables using `ranger` random forests, and then uses `knockoff` for the numeric conditional residuals.
}
\examples{
create.forest.conditional_residuals(
  X,
  method = "second_order",
  residuals_method = "equi"
 )
create.forest.conditional_residuals(
  X,
  method = "none",
  num.trees = 1024
 )

}
